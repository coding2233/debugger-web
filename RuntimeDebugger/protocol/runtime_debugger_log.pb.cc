// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime_debugger_log.proto

#include "runtime_debugger_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace RuntimeDebugger {
PROTOBUF_CONSTEXPR LogNode::LogNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.log_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_stack_track_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_frame_count_)*/0
  , /*decltype(_impl_.log_type_)*/0} {}
struct LogNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogNodeDefaultTypeInternal() {}
  union {
    LogNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogNodeDefaultTypeInternal _LogNode_default_instance_;
PROTOBUF_CONSTEXPR LogList::LogList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_node_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogListDefaultTypeInternal() {}
  union {
    LogList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogListDefaultTypeInternal _LogList_default_instance_;
}  // namespace RuntimeDebugger
static ::_pb::Metadata file_level_metadata_runtime_5fdebugger_5flog_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_runtime_5fdebugger_5flog_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_runtime_5fdebugger_5flog_2eproto = nullptr;

const uint32_t TableStruct_runtime_5fdebugger_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_.log_time_),
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_.log_frame_count_),
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_.log_type_),
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_.log_message_),
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogNode, _impl_.log_stack_track_),
  0,
  3,
  4,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RuntimeDebugger::LogList, _impl_.log_node_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::RuntimeDebugger::LogNode)},
  { 16, -1, -1, sizeof(::RuntimeDebugger::LogList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::RuntimeDebugger::_LogNode_default_instance_._instance,
  &::RuntimeDebugger::_LogList_default_instance_._instance,
};

const char descriptor_table_protodef_runtime_5fdebugger_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032runtime_debugger_log.proto\022\017RuntimeDeb"
  "ugger\"\371\001\n\007LogNode\022\025\n\010log_time\030\001 \001(\tH\000\210\001\001"
  "\022\034\n\017log_frame_count\030\002 \001(\005H\001\210\001\001\022/\n\010log_ty"
  "pe\030\003 \001(\0162\030.RuntimeDebugger.LogTypeH\002\210\001\001\022"
  "\030\n\013log_message\030\004 \001(\tH\003\210\001\001\022\034\n\017log_stack_t"
  "rack\030\005 \001(\tH\004\210\001\001B\013\n\t_log_timeB\022\n\020_log_fra"
  "me_countB\013\n\t_log_typeB\016\n\014_log_messageB\022\n"
  "\020_log_stack_track\":\n\007LogList\022/\n\rlog_node"
  "_list\030\001 \003(\0132\030.RuntimeDebugger.LogNode*E\n"
  "\007LogType\022\t\n\005Error\020\000\022\n\n\006Assert\020\001\022\013\n\007Warni"
  "ng\020\002\022\007\n\003Log\020\003\022\r\n\tException\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_runtime_5fdebugger_5flog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_runtime_5fdebugger_5flog_2eproto = {
    false, false, 436, descriptor_table_protodef_runtime_5fdebugger_5flog_2eproto,
    "runtime_debugger_log.proto",
    &descriptor_table_runtime_5fdebugger_5flog_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_runtime_5fdebugger_5flog_2eproto::offsets,
    file_level_metadata_runtime_5fdebugger_5flog_2eproto, file_level_enum_descriptors_runtime_5fdebugger_5flog_2eproto,
    file_level_service_descriptors_runtime_5fdebugger_5flog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_runtime_5fdebugger_5flog_2eproto_getter() {
  return &descriptor_table_runtime_5fdebugger_5flog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_runtime_5fdebugger_5flog_2eproto(&descriptor_table_runtime_5fdebugger_5flog_2eproto);
namespace RuntimeDebugger {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_runtime_5fdebugger_5flog_2eproto);
  return file_level_enum_descriptors_runtime_5fdebugger_5flog_2eproto[0];
}
bool LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogNode::_Internal {
 public:
  using HasBits = decltype(std::declval<LogNode>()._impl_._has_bits_);
  static void set_has_log_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log_frame_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_log_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_log_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_stack_track(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LogNode::LogNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RuntimeDebugger.LogNode)
}
LogNode::LogNode(const LogNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_time_){}
    , decltype(_impl_.log_message_){}
    , decltype(_impl_.log_stack_track_){}
    , decltype(_impl_.log_frame_count_){}
    , decltype(_impl_.log_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log_time()) {
    _this->_impl_.log_time_.Set(from._internal_log_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log_message()) {
    _this->_impl_.log_message_.Set(from._internal_log_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_stack_track_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_stack_track_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_log_stack_track()) {
    _this->_impl_.log_stack_track_.Set(from._internal_log_stack_track(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.log_frame_count_, &from._impl_.log_frame_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_type_) -
    reinterpret_cast<char*>(&_impl_.log_frame_count_)) + sizeof(_impl_.log_type_));
  // @@protoc_insertion_point(copy_constructor:RuntimeDebugger.LogNode)
}

inline void LogNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.log_time_){}
    , decltype(_impl_.log_message_){}
    , decltype(_impl_.log_stack_track_){}
    , decltype(_impl_.log_frame_count_){0}
    , decltype(_impl_.log_type_){0}
  };
  _impl_.log_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_stack_track_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_stack_track_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogNode::~LogNode() {
  // @@protoc_insertion_point(destructor:RuntimeDebugger.LogNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_time_.Destroy();
  _impl_.log_message_.Destroy();
  _impl_.log_stack_track_.Destroy();
}

void LogNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogNode::Clear() {
// @@protoc_insertion_point(message_clear_start:RuntimeDebugger.LogNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.log_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.log_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.log_stack_track_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.log_frame_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.log_type_) -
        reinterpret_cast<char*>(&_impl_.log_frame_count_)) + sizeof(_impl_.log_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string log_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_log_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RuntimeDebugger.LogNode.log_time"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 log_frame_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_log_frame_count(&has_bits);
          _impl_.log_frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RuntimeDebugger.LogType log_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_type(static_cast<::RuntimeDebugger::LogType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string log_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_log_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RuntimeDebugger.LogNode.log_message"));
        } else
          goto handle_unusual;
        continue;
      // optional string log_stack_track = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_log_stack_track();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RuntimeDebugger.LogNode.log_stack_track"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuntimeDebugger.LogNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string log_time = 1;
  if (_internal_has_log_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_time().data(), static_cast<int>(this->_internal_log_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RuntimeDebugger.LogNode.log_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_log_time(), target);
  }

  // optional int32 log_frame_count = 2;
  if (_internal_has_log_frame_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_log_frame_count(), target);
  }

  // optional .RuntimeDebugger.LogType log_type = 3;
  if (_internal_has_log_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_log_type(), target);
  }

  // optional string log_message = 4;
  if (_internal_has_log_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_message().data(), static_cast<int>(this->_internal_log_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RuntimeDebugger.LogNode.log_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_log_message(), target);
  }

  // optional string log_stack_track = 5;
  if (_internal_has_log_stack_track()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_stack_track().data(), static_cast<int>(this->_internal_log_stack_track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RuntimeDebugger.LogNode.log_stack_track");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_log_stack_track(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuntimeDebugger.LogNode)
  return target;
}

size_t LogNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuntimeDebugger.LogNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string log_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_time());
    }

    // optional string log_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_message());
    }

    // optional string log_stack_track = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_stack_track());
    }

    // optional int32 log_frame_count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_frame_count());
    }

    // optional .RuntimeDebugger.LogType log_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_log_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogNode::GetClassData() const { return &_class_data_; }


void LogNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogNode*>(&to_msg);
  auto& from = static_cast<const LogNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RuntimeDebugger.LogNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_log_time(from._internal_log_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_log_message(from._internal_log_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_log_stack_track(from._internal_log_stack_track());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.log_frame_count_ = from._impl_.log_frame_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.log_type_ = from._impl_.log_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogNode::CopyFrom(const LogNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuntimeDebugger.LogNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogNode::IsInitialized() const {
  return true;
}

void LogNode::InternalSwap(LogNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_time_, lhs_arena,
      &other->_impl_.log_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_message_, lhs_arena,
      &other->_impl_.log_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_stack_track_, lhs_arena,
      &other->_impl_.log_stack_track_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogNode, _impl_.log_type_)
      + sizeof(LogNode::_impl_.log_type_)
      - PROTOBUF_FIELD_OFFSET(LogNode, _impl_.log_frame_count_)>(
          reinterpret_cast<char*>(&_impl_.log_frame_count_),
          reinterpret_cast<char*>(&other->_impl_.log_frame_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runtime_5fdebugger_5flog_2eproto_getter, &descriptor_table_runtime_5fdebugger_5flog_2eproto_once,
      file_level_metadata_runtime_5fdebugger_5flog_2eproto[0]);
}

// ===================================================================

class LogList::_Internal {
 public:
};

LogList::LogList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RuntimeDebugger.LogList)
}
LogList::LogList(const LogList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_node_list_){from._impl_.log_node_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RuntimeDebugger.LogList)
}

inline void LogList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_node_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogList::~LogList() {
  // @@protoc_insertion_point(destructor:RuntimeDebugger.LogList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_node_list_.~RepeatedPtrField();
}

void LogList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogList::Clear() {
// @@protoc_insertion_point(message_clear_start:RuntimeDebugger.LogList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_node_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RuntimeDebugger.LogNode log_node_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_node_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuntimeDebugger.LogList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RuntimeDebugger.LogNode log_node_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_node_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_log_node_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuntimeDebugger.LogList)
  return target;
}

size_t LogList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RuntimeDebugger.LogList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RuntimeDebugger.LogNode log_node_list = 1;
  total_size += 1UL * this->_internal_log_node_list_size();
  for (const auto& msg : this->_impl_.log_node_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogList::GetClassData() const { return &_class_data_; }


void LogList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogList*>(&to_msg);
  auto& from = static_cast<const LogList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RuntimeDebugger.LogList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.log_node_list_.MergeFrom(from._impl_.log_node_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogList::CopyFrom(const LogList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RuntimeDebugger.LogList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogList::IsInitialized() const {
  return true;
}

void LogList::InternalSwap(LogList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.log_node_list_.InternalSwap(&other->_impl_.log_node_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_runtime_5fdebugger_5flog_2eproto_getter, &descriptor_table_runtime_5fdebugger_5flog_2eproto_once,
      file_level_metadata_runtime_5fdebugger_5flog_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RuntimeDebugger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RuntimeDebugger::LogNode*
Arena::CreateMaybeMessage< ::RuntimeDebugger::LogNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuntimeDebugger::LogNode >(arena);
}
template<> PROTOBUF_NOINLINE ::RuntimeDebugger::LogList*
Arena::CreateMaybeMessage< ::RuntimeDebugger::LogList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RuntimeDebugger::LogList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
