// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: debugger_protocol_log.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DebuggerProtocol {

  /// <summary>Holder for reflection information generated from debugger_protocol_log.proto</summary>
  public static partial class DebuggerProtocolLogReflection {

    #region Descriptor
    /// <summary>File descriptor for debugger_protocol_log.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DebuggerProtocolLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtkZWJ1Z2dlcl9wcm90b2NvbF9sb2cucHJvdG8SEERlYnVnZ2VyUHJvdG9j",
            "b2wijwEKB0xvZ05vZGUSEAoIbG9nX3RpbWUYASABKAkSFwoPbG9nX2ZyYW1l",
            "X2NvdW50GAIgASgFEisKCGxvZ190eXBlGAMgASgOMhkuRGVidWdnZXJQcm90",
            "b2NvbC5Mb2dUeXBlEhMKC2xvZ19tZXNzYWdlGAQgASgJEhcKD2xvZ19zdGFj",
            "a190cmFjaxgFIAEoCSI7CgdMb2dMaXN0EjAKDWxvZ19ub2RlX2xpc3QYASAD",
            "KAsyGS5EZWJ1Z2dlclByb3RvY29sLkxvZ05vZGUqRQoHTG9nVHlwZRIJCgVF",
            "cnJvchAAEgoKBkFzc2VydBABEgsKB1dhcm5pbmcQAhIHCgNMb2cQAxINCglF",
            "eGNlcHRpb24QBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DebuggerProtocol.LogType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DebuggerProtocol.LogNode), global::DebuggerProtocol.LogNode.Parser, new[]{ "LogTime", "LogFrameCount", "LogType", "LogMessage", "LogStackTrack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DebuggerProtocol.LogList), global::DebuggerProtocol.LogList.Parser, new[]{ "LogNodeList" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LogType {
    [pbr::OriginalName("Error")] Error = 0,
    [pbr::OriginalName("Assert")] Assert = 1,
    [pbr::OriginalName("Warning")] Warning = 2,
    [pbr::OriginalName("Log")] Log = 3,
    [pbr::OriginalName("Exception")] Exception = 4,
  }

  #endregion

  #region Messages
  public sealed partial class LogNode : pb::IMessage<LogNode> {
    private static readonly pb::MessageParser<LogNode> _parser = new pb::MessageParser<LogNode>(() => new LogNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DebuggerProtocol.DebuggerProtocolLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogNode(LogNode other) : this() {
      logTime_ = other.logTime_;
      logFrameCount_ = other.logFrameCount_;
      logType_ = other.logType_;
      logMessage_ = other.logMessage_;
      logStackTrack_ = other.logStackTrack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogNode Clone() {
      return new LogNode(this);
    }

    /// <summary>Field number for the "log_time" field.</summary>
    public const int LogTimeFieldNumber = 1;
    private string logTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogTime {
      get { return logTime_; }
      set {
        logTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log_frame_count" field.</summary>
    public const int LogFrameCountFieldNumber = 2;
    private int logFrameCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogFrameCount {
      get { return logFrameCount_; }
      set {
        logFrameCount_ = value;
      }
    }

    /// <summary>Field number for the "log_type" field.</summary>
    public const int LogTypeFieldNumber = 3;
    private global::DebuggerProtocol.LogType logType_ = global::DebuggerProtocol.LogType.Error;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DebuggerProtocol.LogType LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "log_message" field.</summary>
    public const int LogMessageFieldNumber = 4;
    private string logMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMessage {
      get { return logMessage_; }
      set {
        logMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log_stack_track" field.</summary>
    public const int LogStackTrackFieldNumber = 5;
    private string logStackTrack_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogStackTrack {
      get { return logStackTrack_; }
      set {
        logStackTrack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogTime != other.LogTime) return false;
      if (LogFrameCount != other.LogFrameCount) return false;
      if (LogType != other.LogType) return false;
      if (LogMessage != other.LogMessage) return false;
      if (LogStackTrack != other.LogStackTrack) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogTime.Length != 0) hash ^= LogTime.GetHashCode();
      if (LogFrameCount != 0) hash ^= LogFrameCount.GetHashCode();
      if (LogType != global::DebuggerProtocol.LogType.Error) hash ^= LogType.GetHashCode();
      if (LogMessage.Length != 0) hash ^= LogMessage.GetHashCode();
      if (LogStackTrack.Length != 0) hash ^= LogStackTrack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LogTime);
      }
      if (LogFrameCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LogFrameCount);
      }
      if (LogType != global::DebuggerProtocol.LogType.Error) {
        output.WriteRawTag(24);
        output.WriteEnum((int) LogType);
      }
      if (LogMessage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LogMessage);
      }
      if (LogStackTrack.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogStackTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogTime);
      }
      if (LogFrameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogFrameCount);
      }
      if (LogType != global::DebuggerProtocol.LogType.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogType);
      }
      if (LogMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMessage);
      }
      if (LogStackTrack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogStackTrack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogNode other) {
      if (other == null) {
        return;
      }
      if (other.LogTime.Length != 0) {
        LogTime = other.LogTime;
      }
      if (other.LogFrameCount != 0) {
        LogFrameCount = other.LogFrameCount;
      }
      if (other.LogType != global::DebuggerProtocol.LogType.Error) {
        LogType = other.LogType;
      }
      if (other.LogMessage.Length != 0) {
        LogMessage = other.LogMessage;
      }
      if (other.LogStackTrack.Length != 0) {
        LogStackTrack = other.LogStackTrack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LogTime = input.ReadString();
            break;
          }
          case 16: {
            LogFrameCount = input.ReadInt32();
            break;
          }
          case 24: {
            LogType = (global::DebuggerProtocol.LogType) input.ReadEnum();
            break;
          }
          case 34: {
            LogMessage = input.ReadString();
            break;
          }
          case 42: {
            LogStackTrack = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogList : pb::IMessage<LogList> {
    private static readonly pb::MessageParser<LogList> _parser = new pb::MessageParser<LogList>(() => new LogList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DebuggerProtocol.DebuggerProtocolLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogList(LogList other) : this() {
      logNodeList_ = other.logNodeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogList Clone() {
      return new LogList(this);
    }

    /// <summary>Field number for the "log_node_list" field.</summary>
    public const int LogNodeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::DebuggerProtocol.LogNode> _repeated_logNodeList_codec
        = pb::FieldCodec.ForMessage(10, global::DebuggerProtocol.LogNode.Parser);
    private readonly pbc::RepeatedField<global::DebuggerProtocol.LogNode> logNodeList_ = new pbc::RepeatedField<global::DebuggerProtocol.LogNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DebuggerProtocol.LogNode> LogNodeList {
      get { return logNodeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logNodeList_.Equals(other.logNodeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logNodeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logNodeList_.WriteTo(output, _repeated_logNodeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logNodeList_.CalculateSize(_repeated_logNodeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogList other) {
      if (other == null) {
        return;
      }
      logNodeList_.Add(other.logNodeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logNodeList_.AddEntriesFrom(input, _repeated_logNodeList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
